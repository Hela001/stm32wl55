
ht221_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f4  080049f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049fc  080049fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004a10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004a10  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d5a  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002413  00000000  00000000  00031d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  000353a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcbc  00000000  00000000  000364e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b76  00000000  00000000  0005219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af7e4  00000000  00000000  00063d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001134f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  00113548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	080048f8 	.word	0x080048f8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	080048f8 	.word	0x080048f8

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	; 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2f>:
 8000914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800091c:	bf24      	itt	cs
 800091e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000926:	d90d      	bls.n	8000944 <__aeabi_d2f+0x30>
 8000928:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000934:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000948:	d121      	bne.n	800098e <__aeabi_d2f+0x7a>
 800094a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800094e:	bfbc      	itt	lt
 8000950:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000954:	4770      	bxlt	lr
 8000956:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095e:	f1c2 0218 	rsb	r2, r2, #24
 8000962:	f1c2 0c20 	rsb	ip, r2, #32
 8000966:	fa10 f30c 	lsls.w	r3, r0, ip
 800096a:	fa20 f002 	lsr.w	r0, r0, r2
 800096e:	bf18      	it	ne
 8000970:	f040 0001 	orrne.w	r0, r0, #1
 8000974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800097c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000980:	ea40 000c 	orr.w	r0, r0, ip
 8000984:	fa23 f302 	lsr.w	r3, r3, r2
 8000988:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800098c:	e7cc      	b.n	8000928 <__aeabi_d2f+0x14>
 800098e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000992:	d107      	bne.n	80009a4 <__aeabi_d2f+0x90>
 8000994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000998:	bf1e      	ittt	ne
 800099a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800099e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a2:	4770      	bxne	lr
 80009a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	; 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a74:	d2ed      	bcs.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	460d      	mov	r5, r1
 8000c08:	4604      	mov	r4, r0
 8000c0a:	4688      	mov	r8, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14d      	bne.n	8000cac <__udivmoddi4+0xac>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4694      	mov	ip, r2
 8000c14:	d968      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b152      	cbz	r2, 8000c32 <__udivmoddi4+0x32>
 8000c1c:	fa01 f302 	lsl.w	r3, r1, r2
 8000c20:	f1c2 0120 	rsb	r1, r2, #32
 8000c24:	fa20 f101 	lsr.w	r1, r0, r1
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	ea41 0803 	orr.w	r8, r1, r3
 8000c30:	4094      	lsls	r4, r2
 8000c32:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fbb8 fef5 	udiv	lr, r8, r5
 8000c3c:	fa1f f78c 	uxth.w	r7, ip
 8000c40:	fb05 831e 	mls	r3, r5, lr, r8
 8000c44:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c48:	fb0e f107 	mul.w	r1, lr, r7
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x68>
 8000c50:	eb1c 0303 	adds.w	r3, ip, r3
 8000c54:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c58:	f080 811e 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f240 811b 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c62:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c70:	fb05 3310 	mls	r3, r5, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 f707 	mul.w	r7, r0, r7
 8000c7c:	42a7      	cmp	r7, r4
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x96>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c88:	f080 8108 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c8c:	42a7      	cmp	r7, r4
 8000c8e:	f240 8105 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c92:	4464      	add	r4, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa8>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	f000 80ee 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	4698      	mov	r8, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d0e2      	beq.n	8000ca8 <__udivmoddi4+0xa8>
 8000ce2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ce6:	e7df      	b.n	8000ca8 <__udivmoddi4+0xa8>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8091 	bne.w	8000e18 <__udivmoddi4+0x218>
 8000cf6:	eba1 050c 	sub.w	r5, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb5 f3f7 	udiv	r3, r5, r7
 8000d08:	fb07 5013 	mls	r0, r7, r3, r5
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0505 	adds.w	r5, ip, r5
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	42a8      	cmp	r0, r5
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a2d      	subs	r5, r5, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d34:	fb07 5510 	mls	r5, r7, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4628      	mov	r0, r5
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79e      	b.n	8000c9e <__udivmoddi4+0x9e>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa05 f301 	lsl.w	r3, r5, r1
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40fd      	lsrs	r5, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 5518 	mls	r5, r9, r8, r5
 8000d90:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	42a8      	cmp	r0, r5
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0505 	adds.w	r5, ip, r5
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	42a8      	cmp	r0, r5
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4465      	add	r5, ip
 8000db8:	1a2d      	subs	r5, r5, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb5 f0f9 	udiv	r0, r5, r9
 8000dc0:	fb09 5510 	mls	r5, r9, r0, r5
 8000dc4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45ae      	cmp	lr, r5
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0505 	adds.w	r5, ip, r5
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	45ae      	cmp	lr, r5
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4465      	add	r5, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba5 050e 	sub.w	r5, r5, lr
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15e      	cbz	r6, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb65 050e 	sbc.w	r5, r5, lr
 8000e02:	fa05 f707 	lsl.w	r7, r5, r7
 8000e06:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0a:	40cd      	lsrs	r5, r1
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c6 7500 	strd	r7, r5, [r6]
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa25 f303 	lsr.w	r3, r5, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	430d      	orrs	r5, r1
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e38:	fb07 3011 	mls	r0, r7, r1, r3
 8000e3c:	0c2b      	lsrs	r3, r5, #16
 8000e3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e42:	fb01 f00e 	mul.w	r0, r1, lr
 8000e46:	4298      	cmp	r0, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a1b      	subs	r3, r3, r0
 8000e62:	b2ad      	uxth	r5, r5
 8000e64:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e68:	fb07 3310 	mls	r3, r7, r0, r3
 8000e6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e70:	fb00 f30e 	mul.w	r3, r0, lr
 8000e74:	42ab      	cmp	r3, r5
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0505 	adds.w	r5, ip, r5
 8000e7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4465      	add	r5, ip
 8000e8a:	1aed      	subs	r5, r5, r3
 8000e8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e707      	b.n	8000ca8 <__udivmoddi4+0xa8>
 8000e98:	4686      	mov	lr, r0
 8000e9a:	e6e5      	b.n	8000c68 <__udivmoddi4+0x68>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fa      	b.n	8000c96 <__udivmoddi4+0x96>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4641      	mov	r1, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4465      	add	r5, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef0:	f023 0218 	bic.w	r2, r3, #24
 8000ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
	...

08000f3c <HTS221_ReadReg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to read a single byte from the HTS221 sensor over I2C
uint8_t HTS221_ReadReg(uint8_t reg) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c1, (0xBF<<1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <HTS221_ReadReg+0x34>)
 8000f62:	f000 ff71 	bl	8001e48 <HAL_I2C_Mem_Read>
    //HAL_I2C_Mem_Read(&hi2c1, (HTS221_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);

    return data;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000030 	.word	0x20000030

08000f74 <HTS221_WriteReg>:

// Function to write a single byte to the HTS221 sensor over I2C
void HTS221_WriteReg(uint8_t reg, uint8_t data) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, (0xBE<<1)+0, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <HTS221_WriteReg+0x38>)
 8000f9e:	f000 fe3f 	bl	8001c20 <HAL_I2C_Mem_Write>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000030 	.word	0x20000030

08000fb0 <HTS221_Init>:

// Function to initialize the HTS221 sensor
void HTS221_Init() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    // Read the WHO_AM_I register to verify communication with the sensor
    uint8_t who_am_i = HTS221_ReadReg(HTS221_WHO_AM_I);
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff ffc0 	bl	8000f3c <HTS221_ReadReg>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
    if (who_am_i != 0xBC) {
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2bbc      	cmp	r3, #188	; 0xbc
 8000fc4:	d10c      	bne.n	8000fe0 <HTS221_Init+0x30>
        // Error: WHO_AM_I register value does not match expected value
        return;
    }

    // Configure the control registers for one-shot measurement mode, 12.5 Hz output data rate, and block data update
    HTS221_WriteReg(HTS221_CTRL_REG1, HTS221_ODR_ONE_SHOT | HTS221_PD_BIT);
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	2020      	movs	r0, #32
 8000fca:	f7ff ffd3 	bl	8000f74 <HTS221_WriteReg>
    HTS221_WriteReg(HTS221_CTRL_REG2, 0x00);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2021      	movs	r0, #33	; 0x21
 8000fd2:	f7ff ffcf 	bl	8000f74 <HTS221_WriteReg>
    HTS221_WriteReg(HTS221_CTRL_REG3, 0x00);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2022      	movs	r0, #34	; 0x22
 8000fda:	f7ff ffcb 	bl	8000f74 <HTS221_WriteReg>
 8000fde:	e000      	b.n	8000fe2 <HTS221_Init+0x32>
        return;
 8000fe0:	bf00      	nop

    // Wait for the sensor to be ready for measurements
   // while (!(HTS221_ReadReg(HTS221_STATUS_REG) & 0x01));
}
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HTS221_ReadData>:
void HTS221_ReadData(float temperature, float humidity) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
    // Start a one-shot measurement by writing to the control register
    uint8_t ctrl_reg1 = HTS221_ReadReg( HTS221_CTRL_REG1);
 8000ff2:	2020      	movs	r0, #32
 8000ff4:	f7ff ffa2 	bl	8000f3c <HTS221_ReadReg>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
    ctrl_reg1 |= 0x85; // Set PD bit to 1 and BDU bit to 1
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f063 037a 	orn	r3, r3, #122	; 0x7a
 8001002:	73fb      	strb	r3, [r7, #15]
    HTS221_WriteReg(HTS221_CTRL_REG1, ctrl_reg1);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	2020      	movs	r0, #32
 800100a:	f7ff ffb3 	bl	8000f74 <HTS221_WriteReg>

    // Wait for the measurement to complete
  //  while (!(HTS221_ReadReg(HTS221_STATUS_REG) & 0x01));

    // Read the humidity data (two bytes)
    uint16_t humidity_raw = (HTS221_ReadReg(HTS221_HUMIDITY_OUT_H) << 8) | HTS221_ReadReg(HTS221_HUMIDITY_OUT_L);
 800100e:	2029      	movs	r0, #41	; 0x29
 8001010:	f7ff ff94 	bl	8000f3c <HTS221_ReadReg>
 8001014:	4603      	mov	r3, r0
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21c      	sxth	r4, r3
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f7ff ff8e 	bl	8000f3c <HTS221_ReadReg>
 8001020:	4603      	mov	r3, r0
 8001022:	b21b      	sxth	r3, r3
 8001024:	4323      	orrs	r3, r4
 8001026:	b21b      	sxth	r3, r3
 8001028:	81bb      	strh	r3, [r7, #12]

    // Read the temperature data (two bytes)
    uint16_t temperature_raw = (HTS221_ReadReg(HTS221_TEMP_OUT_H) << 8) | HTS221_ReadReg(HTS221_TEMP_OUT_L);
 800102a:	202b      	movs	r0, #43	; 0x2b
 800102c:	f7ff ff86 	bl	8000f3c <HTS221_ReadReg>
 8001030:	4603      	mov	r3, r0
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21c      	sxth	r4, r3
 8001036:	202a      	movs	r0, #42	; 0x2a
 8001038:	f7ff ff80 	bl	8000f3c <HTS221_ReadReg>
 800103c:	4603      	mov	r3, r0
 800103e:	b21b      	sxth	r3, r3
 8001040:	4323      	orrs	r3, r4
 8001042:	b21b      	sxth	r3, r3
 8001044:	817b      	strh	r3, [r7, #10]

    // Convert the raw data to temperature and humidity values (see HTS221 datasheet for details)
    humidity = (float)humidity_raw / 65536.0 * 100.0;
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fd69 	bl	8000b20 <__aeabi_ui2f>
 800104e:	4603      	mov	r3, r0
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f9f5 	bl	8000440 <__aeabi_f2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <HTS221_ReadData+0xf8>)
 800105c:	f7ff fb72 	bl	8000744 <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HTS221_ReadData+0xfc>)
 800106e:	f7ff fa3f 	bl	80004f0 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fc4b 	bl	8000914 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	603b      	str	r3, [r7, #0]
    temperature = (float)temperature_raw / 65536.0 * 165.0 - 40.0;
 8001082:	897b      	ldrh	r3, [r7, #10]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fd4b 	bl	8000b20 <__aeabi_ui2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9d7 	bl	8000440 <__aeabi_f2d>
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HTS221_ReadData+0xf8>)
 8001098:	f7ff fb54 	bl	8000744 <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	a30c      	add	r3, pc, #48	; (adr r3, 80010d8 <HTS221_ReadData+0xf0>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fa21 	bl	80004f0 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HTS221_ReadData+0x100>)
 80010bc:	f7ff f860 	bl	8000180 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fc24 	bl	8000914 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	607b      	str	r3, [r7, #4]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	00000000 	.word	0x00000000
 80010dc:	4064a000 	.word	0x4064a000
 80010e0:	40f00000 	.word	0x40f00000
 80010e4:	40590000 	.word	0x40590000
 80010e8:	40440000 	.word	0x40440000

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fa2a 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f81c 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 f8fe 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010fc:	f000 f8b0 	bl	8001260 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001100:	f000 f870 	bl	80011e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init();
 8001104:	f7ff ff54 	bl	8000fb0 <HTS221_Init>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8001108:	2001      	movs	r0, #1
 800110a:	f001 fb0d 	bl	8002728 <HAL_PWREx_ReleaseCore>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HTS221_ReadData(temperature, humidity);
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <main+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <main+0x40>)
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff65 	bl	8000fe8 <HTS221_ReadData>
	  HAL_Delay(500);
 800111e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001122:	f000 fa87 	bl	8001634 <HAL_Delay>
	  HTS221_ReadData(temperature, humidity);
 8001126:	e7f2      	b.n	800110e <main+0x22>
 8001128:	20000028 	.word	0x20000028
 800112c:	2000002c 	.word	0x2000002c

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b09a      	sub	sp, #104	; 0x68
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2248      	movs	r2, #72	; 0x48
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fbd2 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001156:	f001 fabf 	bl	80026d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fec0 	bl	8000ee0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemClock_Config+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <SystemClock_Config+0xb0>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <SystemClock_Config+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800117c:	2324      	movs	r3, #36	; 0x24
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001180:	2381      	movs	r3, #129	; 0x81
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001188:	2300      	movs	r3, #0
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fd87 	bl	8002cac <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011a4:	f000 f8b5 	bl	8001312 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80011a8:	236f      	movs	r3, #111	; 0x6f
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f8f1 	bl	80033b0 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80011d4:	f000 f89d 	bl	8001312 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3768      	adds	r7, #104	; 0x68
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58000400 	.word	0x58000400

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_I2C1_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_I2C1_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_I2C1_Init+0x74>)
 80011f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80011f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_I2C1_Init+0x74>)
 80011fe:	2201      	movs	r2, #1
 8001200:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_I2C1_Init+0x74>)
 8001222:	f000 fc6d 	bl	8001b00 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 f871 	bl	8001312 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <MX_I2C1_Init+0x74>)
 8001234:	f001 f9ba 	bl	80025ac <HAL_I2CEx_ConfigAnalogFilter>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800123e:	f000 f868 	bl	8001312 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x74>)
 8001246:	f001 f9fb 	bl	8002640 <HAL_I2CEx_ConfigDigitalFilter>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 f85f 	bl	8001312 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000030 	.word	0x20000030
 800125c:	40005400 	.word	0x40005400

08001260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <MX_USART2_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 80012aa:	f002 fd7c 	bl	8003da6 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 f82d 	bl	8001312 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 80012bc:	f003 fa27 	bl	800470e <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f000 f824 	bl	8001312 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f003 fa5c 	bl	800478a <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 f81b 	bl	8001312 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_USART2_UART_Init+0x90>)
 80012de:	f003 f9de 	bl	800469e <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 f813 	bl	8001312 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000084 	.word	0x20000084
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fe04 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2004      	movs	r0, #4
 8001304:	f7ff fe01 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fdfe 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001316:	b672      	cpsid	i
}
 8001318:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131a:	e7fe      	b.n	800131a <Error_Handler+0x8>

0800131c <LL_AHB2_GRP1_EnableClock>:
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800132a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800135a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001370:	68fb      	ldr	r3, [r7, #12]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b096      	sub	sp, #88	; 0x58
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2238      	movs	r2, #56	; 0x38
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fa9d 	bl	80048e8 <memset>
  if(hi2c->Instance==I2C1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0x88>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d126      	bne.n	8001406 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013c0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fbb2 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013d2:	f7ff ff9e 	bl	8001312 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff ffa0 	bl	800131c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2312      	movs	r3, #18
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ee:	2304      	movs	r3, #4
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013f6:	4619      	mov	r1, r3
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <HAL_I2C_MspInit+0x8c>)
 80013fa:	f000 fa21 	bl	8001840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001402:	f7ff ffa3 	bl	800134c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3758      	adds	r7, #88	; 0x58
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2238      	movs	r2, #56	; 0x38
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa55 	bl	80048e8 <memset>
  if(huart->Instance==USART2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_UART_MspInit+0x88>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d126      	bne.n	8001496 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001448:	2302      	movs	r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800144c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001450:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fb6a 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001462:	f7ff ff56 	bl	8001312 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001466:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800146a:	f7ff ff6f 	bl	800134c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff54 	bl	800131c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001474:	230c      	movs	r3, #12
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001484:	2307      	movs	r3, #7
 8001486:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f000 f9d5 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3758      	adds	r7, #88	; 0x58
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004400 	.word	0x40004400

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f887 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff fcec 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f003 f9bd 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff fde1 	bl	80010ec <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001538:	08004a04 	.word	0x08004a04
  ldr r2, =_sbss
 800153c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001540:	2000011c 	.word	0x2000011c

08001544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001552:	2003      	movs	r0, #3
 8001554:	f000 f942 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001558:	f002 f90c 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 800155c:	4603      	mov	r3, r0
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_Init+0x3c>)
 8001560:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f810 	bl	8001588 <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e001      	b.n	8001578 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001574:	f7ff ff02 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000000 	.word	0x20000000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_InitTick+0x6c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d024      	beq.n	80015e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800159c:	f002 f8ea 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_InitTick+0x6c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f936 	bl	8001826 <HAL_SYSTICK_Config>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10f      	bne.n	80015e0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d809      	bhi.n	80015da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	f04f 30ff 	mov.w	r0, #4294967295
 80015ce:	f000 f910 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_InitTick+0x70>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e007      	b.n	80015ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e004      	b.n	80015ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x1c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x20>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x20>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000008 	.word	0x20000008
 800161c:	20000118 	.word	0x20000118

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000118 	.word	0x20000118

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff0 	bl	8001620 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffe0 	bl	8001620 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff90 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff49 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff60 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff92 	bl	8001734 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff61 	bl	80016e0 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffb2 	bl	8001798 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e140      	b.n	8001ad2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8132 	beq.w	8001acc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <HAL_GPIO_Init+0x40>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d130      	bne.n	80018e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0201 	and.w	r2, r3, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d123      	bne.n	8001972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0203 	and.w	r2, r3, #3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 808c 	beq.w	8001acc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	2207      	movs	r2, #7
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1bc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <HAL_GPIO_Init+0x2b4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1b8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1b4>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e004      	b.n	80019fe <HAL_GPIO_Init+0x1be>
 80019f4:	2307      	movs	r3, #7
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x1be>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_GPIO_Init+0x1be>
 80019fc:	2300      	movs	r3, #0
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a0e:	4938      	ldr	r1, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a40:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a76:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a96:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f aeb7 	bne.w	8001850 <HAL_GPIO_Init+0x10>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	58000800 	.word	0x58000800

08001b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e081      	b.n	8001c16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fc2e 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d104      	bne.n	8001b9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69d9      	ldr	r1, [r3, #28]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	460b      	mov	r3, r1
 8001c34:	813b      	strh	r3, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	f040 80f9 	bne.w	8001e3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_I2C_Mem_Write+0x34>
 8001c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0ed      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Mem_Write+0x4e>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0e6      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c76:	f7ff fcd3 	bl	8001620 <HAL_GetTick>
 8001c7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2319      	movs	r3, #25
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fac2 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0d1      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2221      	movs	r2, #33	; 0x21
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc0:	88f8      	ldrh	r0, [r7, #6]
 8001cc2:	893a      	ldrh	r2, [r7, #8]
 8001cc4:	8979      	ldrh	r1, [r7, #10]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4603      	mov	r3, r0
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f9d3 	bl	800207c <I2C_RequestMemoryWrite>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0a9      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d90e      	bls.n	8001d10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	22ff      	movs	r2, #255	; 0xff
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fc1f 	bl	800254c <I2C_TransferConfig>
 8001d0e:	e00f      	b.n	8001d30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	8979      	ldrh	r1, [r7, #10]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fc0e 	bl	800254c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 faac 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07b      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d034      	beq.n	8001de8 <HAL_I2C_Mem_Write+0x1c8>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d130      	bne.n	8001de8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fa3e 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e04d      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2bff      	cmp	r3, #255	; 0xff
 8001da8:	d90e      	bls.n	8001dc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	22ff      	movs	r2, #255	; 0xff
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	2300      	movs	r3, #0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fbc3 	bl	800254c <I2C_TransferConfig>
 8001dc6:	e00f      	b.n	8001de8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	8979      	ldrh	r1, [r7, #10]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fbb2 	bl	800254c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d19e      	bne.n	8001d30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fa8b 	bl	8002312 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e01a      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_I2C_Mem_Write+0x224>)
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	fe00e800 	.word	0xfe00e800

08001e48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	817b      	strh	r3, [r7, #10]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	813b      	strh	r3, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	f040 80fd 	bne.w	800206a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_I2C_Mem_Read+0x34>
 8001e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0f1      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x4e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0ea      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fbbf 	bl	8001620 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2319      	movs	r3, #25
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f9ae 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d5      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2222      	movs	r2, #34	; 0x22
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a3a      	ldr	r2, [r7, #32]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee8:	88f8      	ldrh	r0, [r7, #6]
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	8979      	ldrh	r1, [r7, #10]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f913 	bl	8002124 <I2C_RequestMemoryRead>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ad      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d90e      	bls.n	8001f38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	22ff      	movs	r2, #255	; 0xff
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_I2C_Mem_Read+0x22c>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fb0b 	bl	800254c <I2C_TransferConfig>
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_I2C_Mem_Read+0x22c>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fafa 	bl	800254c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2104      	movs	r1, #4
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f955 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07c      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d034      	beq.n	8002018 <HAL_I2C_Mem_Read+0x1d0>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d130      	bne.n	8002018 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f926 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e04d      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d90e      	bls.n	8001ff8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 faab 	bl	800254c <I2C_TransferConfig>
 8001ff6:	e00f      	b.n	8002018 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	b2da      	uxtb	r2, r3
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	2300      	movs	r3, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa9a 	bl	800254c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d19a      	bne.n	8001f58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f973 	bl	8002312 <I2C_WaitOnSTOPFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e01a      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_I2C_Mem_Read+0x230>)
 800204a:	400b      	ands	r3, r1
 800204c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	80002400 	.word	0x80002400
 8002078:	fe00e800 	.word	0xfe00e800

0800207c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	460b      	mov	r3, r1
 8002090:	813b      	strh	r3, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <I2C_RequestMemoryWrite+0xa4>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fa51 	bl	800254c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f8ef 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e02c      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
 80020ce:	e015      	b.n	80020fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f8d5 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e012      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f2:	893b      	ldrh	r3, [r7, #8]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2200      	movs	r2, #0
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f883 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	80002000 	.word	0x80002000

08002124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	8979      	ldrh	r1, [r7, #10]
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <I2C_RequestMemoryRead+0xa4>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2300      	movs	r3, #0
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f9fe 	bl	800254c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f89c 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e02c      	b.n	80021be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
 8002174:	e015      	b.n	80021a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002176:	893b      	ldrh	r3, [r7, #8]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b29b      	uxth	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f882 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e012      	b.n	80021be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	; 0x40
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f830 	bl	8002212 <I2C_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	80002000 	.word	0x80002000

080021cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d103      	bne.n	80021ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d007      	beq.n	8002208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	619a      	str	r2, [r3, #24]
  }
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002222:	e022      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d01e      	beq.n	800226a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7ff f9f8 	bl	8001620 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnFlagUntilTimeout+0x30>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0220 	orr.w	r2, r3, #32
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	429a      	cmp	r2, r3
 8002286:	d0cd      	beq.n	8002224 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229e:	e02c      	b.n	80022fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f871 	bl	800238c <I2C_IsErrorOccurred>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e02a      	b.n	800230a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d01e      	beq.n	80022fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022bc:	f7ff f9b0 	bl	8001620 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d302      	bcc.n	80022d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0220 	orr.w	r2, r3, #32
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d1cb      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231e:	e028      	b.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f831 	bl	800238c <I2C_IsErrorOccurred>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e026      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002334:	f7ff f974 	bl	8001620 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d113      	bne.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e007      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d1cf      	bne.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d068      	beq.n	800248a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023c0:	e049      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d045      	beq.n	8002456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff f929 	bl	8001620 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_IsErrorOccurred+0x54>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13a      	bne.n	8002456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d121      	bne.n	8002448 <I2C_IsErrorOccurred+0xbc>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d01d      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d01a      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002422:	f7ff f8fd 	bl	8001620 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e00e      	b.n	8002448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800242a:	f7ff f8f9 	bl	8001620 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b19      	cmp	r3, #25
 8002436:	d907      	bls.n	8002448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002446:	e006      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d1e9      	bne.n	800242a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d003      	beq.n	800246c <I2C_IsErrorOccurred+0xe0>
 8002464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0aa      	beq.n	80023c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00b      	beq.n	80024f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fe63 	bl	80021cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <I2C_IsErrorOccurred+0x1bc>)
 8002512:	400b      	ands	r3, r1
 8002514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800253a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	fe00e800 	.word	0xfe00e800

0800254c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	4613      	mov	r3, r2
 800255c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002564:	7a7b      	ldrb	r3, [r7, #9]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	4313      	orrs	r3, r2
 8002576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800257a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <I2C_TransferConfig+0x5c>)
 800258c:	430b      	orrs	r3, r1
 800258e:	43db      	mvns	r3, r3
 8002590:	ea02 0103 	and.w	r1, r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	03ff63ff 	.word	0x03ff63ff

080025ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d138      	bne.n	8002634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e032      	b.n	8002636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	d139      	bne.n	80026ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002660:	2302      	movs	r3, #2
 8002662:	e033      	b.n	80026cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002692:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	58000400 	.word	0x58000400

080026f4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <LL_PWR_EnableBootC2+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <LL_PWR_EnableBootC2+0x18>)
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	58000400 	.word	0x58000400

08002710 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_PWREx_GetVoltageRange+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	58000400 	.word	0x58000400

08002728 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002730:	f7ff ffe0 	bl	80026f4 <LL_PWR_EnableBootC2>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <LL_PWR_IsEnabledBkUpAccess>:
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274c:	d101      	bne.n	8002752 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <LL_RCC_HSE_EnableTcxo>:
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_RCC_HSE_DisableTcxo>:
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027aa:	d101      	bne.n	80027b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_RCC_HSE_Enable>:
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSE_Disable>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <LL_RCC_HSE_IsReady>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002804:	d101      	bne.n	800280a <LL_RCC_HSE_IsReady+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_RCC_HSE_IsReady+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_HSI_Enable>:
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_HSI_Disable>:
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <LL_RCC_HSI_IsReady>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	d101      	bne.n	8002864 <LL_RCC_HSI_IsReady+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_RCC_HSI_IsReady+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LL_RCC_HSI_SetCalibTrimming>:
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d101      	bne.n	80028ae <LL_RCC_LSE_IsReady+0x18>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_RCC_LSE_IsReady+0x1a>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d101      	bne.n	8002910 <LL_RCC_LSI_IsReady+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_RCC_LSI_IsReady+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d101      	bne.n	8002968 <LL_RCC_MSI_IsReady+0x16>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_RCC_MSI_IsReady+0x18>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d101      	bne.n	8002988 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a84:	f023 020f 	bic.w	r2, r3, #15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b92:	d101      	bne.n	8002b98 <LL_RCC_PLL_IsReady+0x18>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <LL_RCC_PLL_IsReady+0x1a>
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d101      	bne.n	8002c14 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d101      	bne.n	8002c5c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c78:	d101      	bne.n	8002c7e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9a:	d101      	bne.n	8002ca0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e36f      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cbe:	f7ff fea6 	bl	8002a0e <LL_RCC_GetSysClkSource>
 8002cc2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc4:	f7ff ff8f 	bl	8002be6 <LL_RCC_PLL_GetMainSource>
 8002cc8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80c4 	beq.w	8002e60 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x3e>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d176      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d173      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e353      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x68>
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d12:	e006      	b.n	8002d22 <HAL_RCC_OscConfig+0x76>
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d222      	bcs.n	8002d6c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd5a 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e331      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fe2b 	bl	80029c0 <LL_RCC_MSI_SetCalibTrimming>
 8002d6a:	e021      	b.n	8002db0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fe12 	bl	80029c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fd1f 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e2f6      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002db0:	f000 fce0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4aa7      	ldr	r2, [pc, #668]	; (8003054 <HAL_RCC_OscConfig+0x3a8>)
 8002db8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002dba:	4ba7      	ldr	r3, [pc, #668]	; (8003058 <HAL_RCC_OscConfig+0x3ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fbe2 	bl	8001588 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d047      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	e2e5      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dda:	f7ff fd9e 	bl	800291a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fc1f 	bl	8001620 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de6:	f7fe fc1b 	bl	8001620 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e2d2      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002df8:	f7ff fdab 	bl	8002952 <LL_RCC_MSI_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f1      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fdc7 	bl	80029c0 <LL_RCC_MSI_SetCalibTrimming>
 8002e32:	e015      	b.n	8002e60 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e34:	f7ff fd7f 	bl	8002936 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fbf2 	bl	8001620 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe fbee 	bl	8001620 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2a5      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e52:	f7ff fd7e 	bl	8002952 <LL_RCC_MSI_IsReady>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f1      	bne.n	8002e40 <HAL_RCC_OscConfig+0x194>
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e5e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d058      	beq.n	8002f1e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d108      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d14b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e289      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x204>
 8002eaa:	f7ff fc86 	bl	80027ba <LL_RCC_HSE_Enable>
 8002eae:	e00d      	b.n	8002ecc <HAL_RCC_OscConfig+0x220>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002eb8:	d104      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x218>
 8002eba:	f7ff fc51 	bl	8002760 <LL_RCC_HSE_EnableTcxo>
 8002ebe:	f7ff fc7c 	bl	80027ba <LL_RCC_HSE_Enable>
 8002ec2:	e003      	b.n	8002ecc <HAL_RCC_OscConfig+0x220>
 8002ec4:	f7ff fc87 	bl	80027d6 <LL_RCC_HSE_Disable>
 8002ec8:	f7ff fc58 	bl	800277c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fba4 	bl	8001620 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fba0 	bl	8001620 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e257      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eee:	f7ff fc80 	bl	80027f2 <LL_RCC_HSE_IsReady>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f1      	beq.n	8002edc <HAL_RCC_OscConfig+0x230>
 8002ef8:	e011      	b.n	8002f1e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe fb91 	bl	8001620 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f02:	f7fe fb8d 	bl	8001620 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b64      	cmp	r3, #100	; 0x64
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e244      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f14:	f7ff fc6d 	bl	80027f2 <LL_RCC_HSE_IsReady>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f1      	bne.n	8002f02 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d046      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_OscConfig+0x290>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d10e      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e22a      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fc8e 	bl	800286e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f52:	e031      	b.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	f7ff fc5a 	bl	8002814 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fb5e 	bl	8001620 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe fb5a 	bl	8001620 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e211      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f7a:	f7ff fc67 	bl	800284c <LL_RCC_HSI_IsReady>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f1      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fc70 	bl	800286e <LL_RCC_HSI_SetCalibTrimming>
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f90:	f7ff fc4e 	bl	8002830 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fb44 	bl	8001620 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fb40 	bl	8001620 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f7      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fae:	f7ff fc4d 	bl	800284c <LL_RCC_HSI_IsReady>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f1      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d06e      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d056      	beq.n	800307a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d031      	beq.n	8003048 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e1d0      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003006:	f7ff fc67 	bl	80028d8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300a:	f7fe fb09 	bl	8001620 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe fb05 	bl	8001620 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b11      	cmp	r3, #17
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1bc      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003024:	f7ff fc68 	bl	80028f8 <LL_RCC_LSI_IsReady>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f1      	bne.n	8003012 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	f023 0210 	bic.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003048:	f7ff fc36 	bl	80028b8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fae8 	bl	8001620 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003052:	e00c      	b.n	800306e <HAL_RCC_OscConfig+0x3c2>
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fae0 	bl	8001620 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b11      	cmp	r3, #17
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e197      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800306e:	f7ff fc43 	bl	80028f8 <LL_RCC_LSI_IsReady>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f1      	beq.n	800305c <HAL_RCC_OscConfig+0x3b0>
 8003078:	e013      	b.n	80030a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	f7ff fc2d 	bl	80028d8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fe facf 	bl	8001620 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7fe facb 	bl	8001620 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b11      	cmp	r3, #17
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e182      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003098:	f7ff fc2e 	bl	80028f8 <LL_RCC_LSI_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f1      	bne.n	8003086 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80d8 	beq.w	8003260 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030b0:	f7ff fb44 	bl	800273c <LL_PWR_IsEnabledBkUpAccess>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d113      	bne.n	80030e2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030ba:	f7ff fb0d 	bl	80026d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe faaf 	bl	8001620 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe faab 	bl	8001620 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e162      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030d8:	f7ff fb30 	bl	800273c <LL_PWR_IsEnabledBkUpAccess>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f1      	beq.n	80030c6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d07b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b85      	cmp	r3, #133	; 0x85
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d109      	bne.n	800310e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fe fa87 	bl	8001620 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fa79 	bl	8001620 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e12e      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003140:	f7ff fba9 	bl	8002896 <LL_RCC_LSE_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ef      	beq.n	800312a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b81      	cmp	r3, #129	; 0x81
 8003150:	d003      	beq.n	800315a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b85      	cmp	r3, #133	; 0x85
 8003158:	d121      	bne.n	800319e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe fa61 	bl	8001620 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fa53 	bl	8001620 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e108      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ec      	beq.n	8003176 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800319c:	e060      	b.n	8003260 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fa3f 	bl	8001620 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fa31 	bl	8001620 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0e6      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ec      	bne.n	80031ba <HAL_RCC_OscConfig+0x50e>
 80031e0:	e03e      	b.n	8003260 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe fa1d 	bl	8001620 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe fa0f 	bl	8001620 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0c4      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ec      	bne.n	80031fe <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003224:	f7fe f9fc 	bl	8001620 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f9ee 	bl	8001620 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0a3      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003256:	f7ff fb1e 	bl	8002896 <LL_RCC_LSE_IsReady>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ef      	bne.n	8003240 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8099 	beq.w	800339c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d06c      	beq.n	800334a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2b02      	cmp	r3, #2
 8003276:	d14b      	bne.n	8003310 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	f7ff fc74 	bl	8002b64 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe f9d0 	bl	8001620 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe f9cc 	bl	8001620 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b0a      	cmp	r3, #10
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e083      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003296:	f7ff fc73 	bl	8002b80 <LL_RCC_PLL_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_RCC_OscConfig+0x6fc>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b8:	0212      	lsls	r2, r2, #8
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032cc:	430a      	orrs	r2, r1
 80032ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d6:	f7ff fc37 	bl	8002b48 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe f999 	bl	8001620 <HAL_GetTick>
 80032ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe f995 	bl	8001620 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e04c      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003304:	f7ff fc3c 	bl	8002b80 <LL_RCC_PLL_IsReady>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f1      	beq.n	80032f2 <HAL_RCC_OscConfig+0x646>
 800330e:	e045      	b.n	800339c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	f7ff fc28 	bl	8002b64 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe f984 	bl	8001620 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f980 	bl	8001620 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e037      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800332e:	f7ff fc27 	bl	8002b80 <LL_RCC_PLL_IsReady>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f1      	bne.n	800331c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_OscConfig+0x700>)
 8003344:	4013      	ands	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e028      	b.n	800339c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e023      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	429a      	cmp	r2, r3
 800336a:	d115      	bne.n	8003398 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	429a      	cmp	r2, r3
 8003378:	d10e      	bne.n	8003398 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	429a      	cmp	r2, r3
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	11c1808c 	.word	0x11c1808c
 80033ac:	eefefffc 	.word	0xeefefffc

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e12c      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b98      	ldr	r3, [pc, #608]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d91b      	bls.n	800340a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b95      	ldr	r3, [pc, #596]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 0207 	bic.w	r2, r3, #7
 80033da:	4993      	ldr	r1, [pc, #588]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e2:	f7fe f91d 	bl	8001620 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033ea:	f7fe f919 	bl	8001620 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e110      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fc:	4b8a      	ldr	r3, [pc, #552]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d1ef      	bne.n	80033ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fb02 	bl	8002a24 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003420:	f7fe f8fe 	bl	8001620 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003428:	f7fe f8fa 	bl	8001620 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0f1      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800343a:	f7ff fbdf 	bl	8002bfc <LL_RCC_IsActiveFlag_HPRE>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f1      	beq.n	8003428 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff faf8 	bl	8002a4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800345a:	f7fe f8e1 	bl	8001620 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003462:	f7fe f8dd 	bl	8001620 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0d4      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003474:	f7ff fbd3 	bl	8002c1e <LL_RCC_IsActiveFlag_C2HPRE>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f1      	beq.n	8003462 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff faf0 	bl	8002a74 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003494:	f7fe f8c4 	bl	8001620 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800349c:	f7fe f8c0 	bl	8001620 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b7      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034ae:	f7ff fbc8 	bl	8002c42 <LL_RCC_IsActiveFlag_SHDHPRE>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f1      	beq.n	800349c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fae9 	bl	8002aa0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ce:	f7fe f8a7 	bl	8001620 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034d6:	f7fe f8a3 	bl	8001620 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e09a      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034e8:	f7ff fbbd 	bl	8002c66 <LL_RCC_IsActiveFlag_PPRE1>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f1      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fade 	bl	8002ac6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800350a:	f7fe f889 	bl	8001620 <HAL_GetTick>
 800350e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003512:	f7fe f885 	bl	8001620 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e07c      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003524:	f7ff fbb0 	bl	8002c88 <LL_RCC_IsActiveFlag_PPRE2>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f1      	beq.n	8003512 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d043      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d106      	bne.n	8003550 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003542:	f7ff f956 	bl	80027f2 <LL_RCC_HSE_IsReady>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11e      	bne.n	800358a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e066      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003558:	f7ff fb12 	bl	8002b80 <LL_RCC_PLL_IsReady>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d113      	bne.n	800358a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e05b      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800356e:	f7ff f9f0 	bl	8002952 <LL_RCC_MSI_IsReady>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e050      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800357c:	f7ff f966 	bl	800284c <LL_RCC_HSI_IsReady>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e049      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fa2a 	bl	80029e8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe f844 	bl	8001620 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe f840 	bl	8001620 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e035      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	f7ff fa2c 	bl	8002a0e <LL_RCC_GetSysClkSource>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	429a      	cmp	r2, r3
 80035c0:	d1ec      	bne.n	800359c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d21b      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d0:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 0207 	bic.w	r2, r3, #7
 80035d8:	4913      	ldr	r1, [pc, #76]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fe f81e 	bl	8001620 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035e8:	f7fe f81a 	bl	8001620 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e011      	b.n	800361e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_ClockConfig+0x278>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d1ef      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003608:	f000 f8b4 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 800360c:	4603      	mov	r3, r0
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_ClockConfig+0x27c>)
 8003610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCC_ClockConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd ffb6 	bl	8001588 <HAL_InitTick>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	58004000 	.word	0x58004000
 800362c:	20000000 	.word	0x20000000
 8003630:	20000004 	.word	0x20000004

08003634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003642:	f7ff f9e4 	bl	8002a0e <LL_RCC_GetSysClkSource>
 8003646:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003648:	f7ff facd 	bl	8002be6 <LL_RCC_PLL_GetMainSource>
 800364c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d139      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d136      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003660:	f7ff f987 	bl	8002972 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x62>
 800366a:	f7ff f982 	bl	8002972 <LL_RCC_MSI_IsEnabledRangeSelect>
 800366e:	4603      	mov	r3, r0
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x4e>
 8003674:	f7ff f98d 	bl	8002992 <LL_RCC_MSI_GetRange>
 8003678:	4603      	mov	r3, r0
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	e005      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x5a>
 8003682:	f7ff f991 	bl	80029a8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003686:	4603      	mov	r3, r0
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	4a36      	ldr	r2, [pc, #216]	; (8003768 <HAL_RCC_GetSysClockFreq+0x134>)
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	e014      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x8c>
 8003696:	f7ff f96c 	bl	8002972 <LL_RCC_MSI_IsEnabledRangeSelect>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x7a>
 80036a0:	f7ff f977 	bl	8002992 <LL_RCC_MSI_GetRange>
 80036a4:	4603      	mov	r3, r0
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	e005      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x86>
 80036ae:	f7ff f97b 	bl	80029a8 <LL_RCC_MSI_GetRangeAfterStandby>
 80036b2:	4603      	mov	r3, r0
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_RCC_GetSysClockFreq+0x134>)
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d115      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036cc:	e012      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d102      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_GetSysClockFreq+0x138>)
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e00c      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d109      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036e0:	f7ff f85a 	bl	8002798 <LL_RCC_HSE_IsEnabledDiv2>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_GetSysClockFreq+0x138>)
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e001      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036f2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f4:	f7ff f98b 	bl	8002a0e <LL_RCC_GetSysClkSource>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d12f      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036fe:	f7ff fa72 	bl	8002be6 <LL_RCC_PLL_GetMainSource>
 8003702:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0xde>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xe4>
 8003710:	e00d      	b.n	800372e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCC_GetSysClockFreq+0x138>)
 8003714:	60fb      	str	r3, [r7, #12]
        break;
 8003716:	e00d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003718:	f7ff f83e 	bl	8002798 <LL_RCC_HSE_IsEnabledDiv2>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_GetSysClockFreq+0x138>)
 8003724:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003726:	e005      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_GetSysClockFreq+0x13c>)
 800372a:	60fb      	str	r3, [r7, #12]
        break;
 800372c:	e002      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	60fb      	str	r3, [r7, #12]
        break;
 8003732:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003734:	f7ff fa35 	bl	8002ba2 <LL_RCC_PLL_GetN>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	fb03 f402 	mul.w	r4, r3, r2
 8003740:	f7ff fa46 	bl	8002bd0 <LL_RCC_PLL_GetDivider>
 8003744:	4603      	mov	r3, r0
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	3301      	adds	r3, #1
 800374a:	fbb4 f4f3 	udiv	r4, r4, r3
 800374e:	f7ff fa34 	bl	8002bba <LL_RCC_PLL_GetR>
 8003752:	4603      	mov	r3, r0
 8003754:	0f5b      	lsrs	r3, r3, #29
 8003756:	3301      	adds	r3, #1
 8003758:	fbb4 f3f3 	udiv	r3, r4, r3
 800375c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800375e:	697b      	ldr	r3, [r7, #20]
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	0800498c 	.word	0x0800498c
 800376c:	00f42400 	.word	0x00f42400
 8003770:	01e84800 	.word	0x01e84800

08003774 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b598      	push	{r3, r4, r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003778:	f7ff ff5c 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 800377c:	4604      	mov	r4, r0
 800377e:	f7ff f9b5 	bl	8002aec <LL_RCC_GetAHBPrescaler>
 8003782:	4603      	mov	r3, r0
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x24>)
 800378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003790:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd98      	pop	{r3, r4, r7, pc}
 8003798:	0800492c 	.word	0x0800492c

0800379c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b598      	push	{r3, r4, r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037a0:	f7ff ffe8 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037a4:	4604      	mov	r4, r0
 80037a6:	f7ff f9b9 	bl	8002b1c <LL_RCC_GetAPB1Prescaler>
 80037aa:	4603      	mov	r3, r0
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd98      	pop	{r3, r4, r7, pc}
 80037bc:	0800496c 	.word	0x0800496c

080037c0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b598      	push	{r3, r4, r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037c4:	f7ff ffd6 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037c8:	4604      	mov	r4, r0
 80037ca:	f7ff f9b2 	bl	8002b32 <LL_RCC_GetAPB2Prescaler>
 80037ce:	4603      	mov	r3, r0
 80037d0:	0adb      	lsrs	r3, r3, #11
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd98      	pop	{r3, r4, r7, pc}
 80037e0:	0800496c 	.word	0x0800496c

080037e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80037f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80037fc:	f7ff f981 	bl	8002b02 <LL_RCC_GetAHB3Prescaler>
 8003800:	4603      	mov	r3, r0
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9c      	lsrs	r4, r3, #18
 8003820:	f7fe ff76 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 8003824:	4603      	mov	r3, r0
 8003826:	4619      	mov	r1, r3
 8003828:	4620      	mov	r0, r4
 800382a:	f000 f80b 	bl	8003844 <RCC_SetFlashLatency>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	0800498c 	.word	0x0800498c
 800383c:	0800492c 	.word	0x0800492c
 8003840:	431bde83 	.word	0x431bde83

08003844 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	; 0x38
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800384e:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <RCC_SetFlashLatency+0xf4>)
 8003850:	f107 0320 	add.w	r3, r7, #32
 8003854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003858:	6018      	str	r0, [r3, #0]
 800385a:	3304      	adds	r3, #4
 800385c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800385e:	4a37      	ldr	r2, [pc, #220]	; (800393c <RCC_SetFlashLatency+0xf8>)
 8003860:	f107 0318 	add.w	r3, r7, #24
 8003864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003868:	6018      	str	r0, [r3, #0]
 800386a:	3304      	adds	r3, #4
 800386c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800386e:	4a34      	ldr	r2, [pc, #208]	; (8003940 <RCC_SetFlashLatency+0xfc>)
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	ca07      	ldmia	r2, {r0, r1, r2}
 8003876:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003884:	d11b      	bne.n	80038be <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003886:	2300      	movs	r3, #0
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
 800388a:	e014      	b.n	80038b6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	3338      	adds	r3, #56	; 0x38
 8003892:	443b      	add	r3, r7
 8003894:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4293      	cmp	r3, r2
 800389e:	d807      	bhi.n	80038b0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3338      	adds	r3, #56	; 0x38
 80038a6:	443b      	add	r3, r7
 80038a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ae:	e021      	b.n	80038f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	3301      	adds	r3, #1
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d9e7      	bls.n	800388c <RCC_SetFlashLatency+0x48>
 80038bc:	e01a      	b.n	80038f4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	e014      	b.n	80038ee <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	443b      	add	r3, r7
 80038cc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3338      	adds	r3, #56	; 0x38
 80038de:	443b      	add	r3, r7
 80038e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038e6:	e005      	b.n	80038f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	3301      	adds	r3, #1
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d9e7      	bls.n	80038c4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <RCC_SetFlashLatency+0x100>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0207 	bic.w	r2, r3, #7
 80038fc:	4911      	ldr	r1, [pc, #68]	; (8003944 <RCC_SetFlashLatency+0x100>)
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003904:	f7fd fe8c 	bl	8001620 <HAL_GetTick>
 8003908:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800390a:	e008      	b.n	800391e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800390c:	f7fd fe88 	bl	8001620 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e007      	b.n	800392e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <RCC_SetFlashLatency+0x100>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003928:	429a      	cmp	r2, r3
 800392a:	d1ef      	bne.n	800390c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3738      	adds	r7, #56	; 0x38
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08004910 	.word	0x08004910
 800393c:	08004918 	.word	0x08004918
 8003940:	08004920 	.word	0x08004920
 8003944:	58004000 	.word	0x58004000

08003948 <LL_RCC_LSE_IsReady>:
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d101      	bne.n	8003960 <LL_RCC_LSE_IsReady+0x18>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <LL_RCC_LSE_IsReady+0x1a>
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <LL_RCC_SetUSARTClockSource>:
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	43db      	mvns	r3, r3
 8003980:	401a      	ands	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <LL_RCC_SetI2SClockSource>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_SetLPUARTClockSource>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetI2CClockSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <LL_RCC_SetLPTIMClockSource>:
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_SetRNGClockSource>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetADCClockSource>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_SetRTCClockSource>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <LL_RCC_GetRTCClockSource>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_ForceBackupDomainReset>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d058      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b50:	f7fe fdc2 	bl	80026d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b54:	f7fd fd64 	bl	8001620 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fd fd60 	bl	8001620 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b6e:	e006      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b70:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13c      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b84:	f7ff ffa7 	bl	8003ad6 <LL_RCC_GetRTCClockSource>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00f      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	f7ff ffa5 	bl	8003aee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	f7ff ffb3 	bl	8003b0e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d014      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fd30 	bl	8001620 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fd2c 	bl	8001620 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d902      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	74fb      	strb	r3, [r7, #19]
            break;
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bdc:	f7ff feb4 	bl	8003948 <LL_RCC_LSE_IsReady>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d1ee      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff5b 	bl	8003aac <LL_RCC_SetRTCClockSource>
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
 8003bfc:	e001      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fea9 	bl	800396a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fe9e 	bl	800396a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fec0 	bl	80039c4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fee6 	bl	8003a26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fedb 	bl	8003a26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fed0 	bl	8003a26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fea9 	bl	80039ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fe9e 	bl	80039ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fe93 	bl	80039ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d011      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fe5e 	bl	800399a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fea5 	bl	8003a58 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fea3 	bl	8003a82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d44:	d107      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58000400 	.word	0x58000400

08003d64 <LL_RCC_GetUSARTClockSource>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	4313      	orrs	r3, r2
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_GetLPUARTClockSource>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4013      	ands	r3, r2
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e042      	b.n	8003e3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fb24 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f82d 	bl	8003e48 <UART_SetConfig>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e022      	b.n	8003e3e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa95 	bl	8004330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fb1b 	bl	8004472 <UART_CheckIdleState>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b08c      	sub	sp, #48	; 0x30
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b94      	ldr	r3, [pc, #592]	; (80040c8 <UART_SetConfig+0x280>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a89      	ldr	r2, [pc, #548]	; (80040cc <UART_SetConfig+0x284>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ebe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f023 010f 	bic.w	r1, r3, #15
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7a      	ldr	r2, [pc, #488]	; (80040d0 <UART_SetConfig+0x288>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d127      	bne.n	8003f3c <UART_SetConfig+0xf4>
 8003eec:	2003      	movs	r0, #3
 8003eee:	f7ff ff39 	bl	8003d64 <LL_RCC_GetUSARTClockSource>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d81b      	bhi.n	8003f34 <UART_SetConfig+0xec>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0xbc>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f25 	.word	0x08003f25
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e080      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e07c      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	e078      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e074      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3a:	e070      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a64      	ldr	r2, [pc, #400]	; (80040d4 <UART_SetConfig+0x28c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d138      	bne.n	8003fb8 <UART_SetConfig+0x170>
 8003f46:	200c      	movs	r0, #12
 8003f48:	f7ff ff0c 	bl	8003d64 <LL_RCC_GetUSARTClockSource>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d82c      	bhi.n	8003fb0 <UART_SetConfig+0x168>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x114>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003fb1 	.word	0x08003fb1
 8003f6c:	08003fa1 	.word	0x08003fa1
 8003f70:	08003fb1 	.word	0x08003fb1
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	08003f99 	.word	0x08003f99
 8003f80:	08003fb1 	.word	0x08003fb1
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fa9 	.word	0x08003fa9
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e042      	b.n	800401e <UART_SetConfig+0x1d6>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9e:	e03e      	b.n	800401e <UART_SetConfig+0x1d6>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa6:	e03a      	b.n	800401e <UART_SetConfig+0x1d6>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fae:	e036      	b.n	800401e <UART_SetConfig+0x1d6>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fb6:	e032      	b.n	800401e <UART_SetConfig+0x1d6>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a43      	ldr	r2, [pc, #268]	; (80040cc <UART_SetConfig+0x284>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12a      	bne.n	8004018 <UART_SetConfig+0x1d0>
 8003fc2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003fc6:	f7ff fedf 	bl	8003d88 <LL_RCC_GetLPUARTClockSource>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd0:	d01a      	beq.n	8004008 <UART_SetConfig+0x1c0>
 8003fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd6:	d81b      	bhi.n	8004010 <UART_SetConfig+0x1c8>
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d00c      	beq.n	8003ff8 <UART_SetConfig+0x1b0>
 8003fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe2:	d815      	bhi.n	8004010 <UART_SetConfig+0x1c8>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <UART_SetConfig+0x1a8>
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d008      	beq.n	8004000 <UART_SetConfig+0x1b8>
 8003fee:	e00f      	b.n	8004010 <UART_SetConfig+0x1c8>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e012      	b.n	800401e <UART_SetConfig+0x1d6>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	e00e      	b.n	800401e <UART_SetConfig+0x1d6>
 8004000:	2304      	movs	r3, #4
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004006:	e00a      	b.n	800401e <UART_SetConfig+0x1d6>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800400e:	e006      	b.n	800401e <UART_SetConfig+0x1d6>
 8004010:	2310      	movs	r3, #16
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004016:	e002      	b.n	800401e <UART_SetConfig+0x1d6>
 8004018:	2310      	movs	r3, #16
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <UART_SetConfig+0x284>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f040 80a4 	bne.w	8004172 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800402a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800402e:	2b08      	cmp	r3, #8
 8004030:	d823      	bhi.n	800407a <UART_SetConfig+0x232>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x1f0>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800405d 	.word	0x0800405d
 800403c:	0800407b 	.word	0x0800407b
 8004040:	08004065 	.word	0x08004065
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800406b 	.word	0x0800406b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	0800407b 	.word	0x0800407b
 8004054:	0800407b 	.word	0x0800407b
 8004058:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7ff fb9e 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004062:	e010      	b.n	8004086 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <UART_SetConfig+0x290>)
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7ff fae3 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004070:	e009      	b.n	8004086 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004078:	e005      	b.n	8004086 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8137 	beq.w	80042fc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <UART_SetConfig+0x294>)
 8004094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004098:	461a      	mov	r2, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d305      	bcc.n	80040be <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d910      	bls.n	80040e0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040c4:	e11a      	b.n	80042fc <UART_SetConfig+0x4b4>
 80040c6:	bf00      	nop
 80040c8:	cfff69f3 	.word	0xcfff69f3
 80040cc:	40008000 	.word	0x40008000
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40004400 	.word	0x40004400
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	080049cc 	.word	0x080049cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	4a8e      	ldr	r2, [pc, #568]	; (8004328 <UART_SetConfig+0x4e0>)
 80040ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2200      	movs	r2, #0
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004102:	f7fc fd65 	bl	8000bd0 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	020b      	lsls	r3, r1, #8
 8004118:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800411c:	0202      	lsls	r2, r0, #8
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	6849      	ldr	r1, [r1, #4]
 8004122:	0849      	lsrs	r1, r1, #1
 8004124:	2000      	movs	r0, #0
 8004126:	460c      	mov	r4, r1
 8004128:	4605      	mov	r5, r0
 800412a:	eb12 0804 	adds.w	r8, r2, r4
 800412e:	eb43 0905 	adc.w	r9, r3, r5
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	469a      	mov	sl, r3
 800413a:	4693      	mov	fp, r2
 800413c:	4652      	mov	r2, sl
 800413e:	465b      	mov	r3, fp
 8004140:	4640      	mov	r0, r8
 8004142:	4649      	mov	r1, r9
 8004144:	f7fc fd44 	bl	8000bd0 <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004156:	d308      	bcc.n	800416a <UART_SetConfig+0x322>
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d204      	bcs.n	800416a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e0c8      	b.n	80042fc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004170:	e0c4      	b.n	80042fc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	d167      	bne.n	800424c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800417c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004180:	2b08      	cmp	r3, #8
 8004182:	d828      	bhi.n	80041d6 <UART_SetConfig+0x38e>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x344>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	080041d7 	.word	0x080041d7
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080041d7 	.word	0x080041d7
 80041a4:	080041d7 	.word	0x080041d7
 80041a8:	080041d7 	.word	0x080041d7
 80041ac:	080041cf 	.word	0x080041cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7ff faf4 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041b6:	e014      	b.n	80041e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b8:	f7ff fb02 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041be:	e010      	b.n	80041e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b5a      	ldr	r3, [pc, #360]	; (800432c <UART_SetConfig+0x4e4>)
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7ff fa35 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041cc:	e009      	b.n	80041e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041d4:	e005      	b.n	80041e2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8089 	beq.w	80042fc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	4a4e      	ldr	r2, [pc, #312]	; (8004328 <UART_SetConfig+0x4e0>)
 80041f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041fc:	005a      	lsls	r2, r3, #1
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	441a      	add	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d916      	bls.n	8004244 <UART_SetConfig+0x3fc>
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d212      	bcs.n	8004244 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f023 030f 	bic.w	r3, r3, #15
 8004226:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	b29a      	uxth	r2, r3
 8004234:	8bfb      	ldrh	r3, [r7, #30]
 8004236:	4313      	orrs	r3, r2
 8004238:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	8bfa      	ldrh	r2, [r7, #30]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e05b      	b.n	80042fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800424a:	e057      	b.n	80042fc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004250:	2b08      	cmp	r3, #8
 8004252:	d828      	bhi.n	80042a6 <UART_SetConfig+0x45e>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x414>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004281 	.word	0x08004281
 8004260:	08004289 	.word	0x08004289
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004297 	.word	0x08004297
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042a7 	.word	0x080042a7
 800427c:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7ff fa8c 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004286:	e014      	b.n	80042b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7ff fa9a 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 800428c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800428e:	e010      	b.n	80042b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b26      	ldr	r3, [pc, #152]	; (800432c <UART_SetConfig+0x4e4>)
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004294:	e00d      	b.n	80042b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7ff f9cd 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 800429a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800429c:	e009      	b.n	80042b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042a4:	e005      	b.n	80042b2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042b0:	bf00      	nop
    }

    if (pclk != 0U)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d021      	beq.n	80042fc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <UART_SetConfig+0x4e0>)
 80042be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	441a      	add	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d909      	bls.n	80042f6 <UART_SetConfig+0x4ae>
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d205      	bcs.n	80042f6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e002      	b.n	80042fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2201      	movs	r2, #1
 8004300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2201      	movs	r2, #1
 8004308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004318:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800431c:	4618      	mov	r0, r3
 800431e:	3730      	adds	r7, #48	; 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	080049cc 	.word	0x080049cc
 800432c:	00f42400 	.word	0x00f42400

08004330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01a      	beq.n	8004446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d10a      	bne.n	8004446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af02      	add	r7, sp, #8
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004482:	f7fd f8cd 	bl	8001620 <HAL_GetTick>
 8004486:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b08      	cmp	r3, #8
 8004494:	d10e      	bne.n	80044b4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004496:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f832 	bl	800450e <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e028      	b.n	8004506 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d10e      	bne.n	80044e0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f81c 	bl	800450e <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e012      	b.n	8004506 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b09c      	sub	sp, #112	; 0x70
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451e:	e0a9      	b.n	8004674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	f000 80a5 	beq.w	8004674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fd f879 	bl	8001620 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <UART_WaitOnFlagUntilTimeout+0x32>
 800453a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453c:	2b00      	cmp	r3, #0
 800453e:	d140      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004554:	667b      	str	r3, [r7, #100]	; 0x64
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800455e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004560:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e6      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	663b      	str	r3, [r7, #96]	; 0x60
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004592:	64ba      	str	r2, [r7, #72]	; 0x48
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e069      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d051      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d149      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800460e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	613b      	str	r3, [r7, #16]
   return(result);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	66bb      	str	r3, [r7, #104]	; 0x68
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800463c:	623a      	str	r2, [r7, #32]
 800463e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	69f9      	ldr	r1, [r7, #28]
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	61bb      	str	r3, [r7, #24]
   return(result);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e010      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	f43f af46 	beq.w	8004520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3770      	adds	r7, #112	; 0x70
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e027      	b.n	8004704 <HAL_UARTEx_DisableFifoMode+0x66>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004722:	2302      	movs	r3, #2
 8004724:	e02d      	b.n	8004782 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f850 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800479e:	2302      	movs	r3, #2
 80047a0:	e02d      	b.n	80047fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f812 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004828:	e031      	b.n	800488e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800482a:	2308      	movs	r3, #8
 800482c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800482e:	2308      	movs	r3, #8
 8004830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	0e5b      	lsrs	r3, r3, #25
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0f5b      	lsrs	r3, r3, #29
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004852:	7bbb      	ldrb	r3, [r7, #14]
 8004854:	7b3a      	ldrb	r2, [r7, #12]
 8004856:	4910      	ldr	r1, [pc, #64]	; (8004898 <UARTEx_SetNbDataToProcess+0x90>)
 8004858:	5c8a      	ldrb	r2, [r1, r2]
 800485a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800485e:	7b3a      	ldrb	r2, [r7, #12]
 8004860:	490e      	ldr	r1, [pc, #56]	; (800489c <UARTEx_SetNbDataToProcess+0x94>)
 8004862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004864:	fb93 f3f2 	sdiv	r3, r3, r2
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	7b7a      	ldrb	r2, [r7, #13]
 8004874:	4908      	ldr	r1, [pc, #32]	; (8004898 <UARTEx_SetNbDataToProcess+0x90>)
 8004876:	5c8a      	ldrb	r2, [r1, r2]
 8004878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800487c:	7b7a      	ldrb	r2, [r7, #13]
 800487e:	4907      	ldr	r1, [pc, #28]	; (800489c <UARTEx_SetNbDataToProcess+0x94>)
 8004880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004882:	fb93 f3f2 	sdiv	r3, r3, r2
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	080049e4 	.word	0x080049e4
 800489c:	080049ec 	.word	0x080049ec

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4d0d      	ldr	r5, [pc, #52]	; (80048d8 <__libc_init_array+0x38>)
 80048a4:	4c0d      	ldr	r4, [pc, #52]	; (80048dc <__libc_init_array+0x3c>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	2600      	movs	r6, #0
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	4d0b      	ldr	r5, [pc, #44]	; (80048e0 <__libc_init_array+0x40>)
 80048b2:	4c0c      	ldr	r4, [pc, #48]	; (80048e4 <__libc_init_array+0x44>)
 80048b4:	f000 f820 	bl	80048f8 <_init>
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	2600      	movs	r6, #0
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	080049fc 	.word	0x080049fc
 80048dc:	080049fc 	.word	0x080049fc
 80048e0:	080049fc 	.word	0x080049fc
 80048e4:	08004a00 	.word	0x08004a00

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
